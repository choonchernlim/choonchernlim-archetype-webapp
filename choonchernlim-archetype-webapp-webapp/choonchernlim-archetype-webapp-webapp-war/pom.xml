<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.github.choonchernlim</groupId>
        <artifactId>choonchernlim-archetype-webapp-webapp</artifactId>
        <version>0.0.0</version>
    </parent>

    <artifactId>choonchernlim-archetype-webapp-webapp-war</artifactId>
    <packaging>war</packaging>

    <dependencies>
        <!-- Groovy. -->
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
        </dependency>

        <!-- Scope = provided. -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
        </dependency>
        <dependency>
            <groupId>net.karneim</groupId>
            <artifactId>pojobuilder</artifactId>
        </dependency>

        <!-- Scope = runtime. -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>

        <!-- Logger. -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>

        <!-- Jackson JSON Mapper. -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-joda</artifactId>
        </dependency>

        <!-- Utilities. -->
        <dependency>
            <groupId>com.github.choonchernlim</groupId>
            <artifactId>better-preconditions</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib-nodep</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>findbugs</artifactId>
        </dependency>


        <!-- Commons. -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
        </dependency>

        <!-- Hibernate. -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jadira.usertype</groupId>
            <artifactId>usertype.core</artifactId>
        </dependency>

        <!-- Spring. -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>

        <!-- Spring Security. -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-taglibs</artifactId>
        </dependency>

        <!-- Joda time. -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time-hibernate</artifactId>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time-jsptags</artifactId>
        </dependency>

        <!-- Scope = test. -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
        </dependency>
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-spring</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava-testlib</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path-assert</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--
            When using `mkarneim/pojobuilder` (https://github.com/mkarneim/pojobuilder), the builder source files
            are generated at `target/generated-sources/annotations`. If these source files exist and `mvn compile`
            is issued, the following exception occurs: "The type *Builder is already defined". This forces us to
            always do `mvn clean` to wipe out `target` first before running any command.

            To fix this, always clean up these source files after it is compiled.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <delete>
                                    <fileset dir="${project.build.directory}/generated-sources/annotations"
                                             includes="**/*Builder.java"/>
                                </delete>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <packagingExcludes>WEB-INF/web.xml, WEB-INF/classes/log4j.xml</packagingExcludes>
                </configuration>
            </plugin>

            <!--
            Setting system property in Jetty Maven Plugin for Log4J doesn't work anymore. So, using this plugin
            to set `log4j.configuration` system property instead.

            http://stackoverflow.com/questions/9995347/slf4j-log4j-not-initialized-in-jetty-maven-plugin
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>set-system-properties</goal>
                        </goals>
                        <configuration>
                            <properties>
                                <property>
                                    <name>log4j.configuration</name>
                                    <value>file:${project.basedir}/src/main/resources/log4j.xml</value>
                                </property>
                            </properties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <configuration>
                    <stopKey>jetty-stop-key</stopKey>
                    <stopPort>7778</stopPort>
                    <scanIntervalSeconds>1</scanIntervalSeconds>
                    <!-- Displays server log in the console. If it gets to be too chatty, this can be disabled. -->
                    <requestLog implementation="org.eclipse.jetty.server.NCSARequestLog">
                        <extended>true</extended>
                        <logTimeZone>CST</logTimeZone>
                    </requestLog>
                    <webApp>
                        <!--
                        The `${project.parent.artifactId}` should be defined as the context path, so the project
                        root link will be `/<context-path>` to be consistent with WAS environment.
                        -->
                        <contextPath>/${project.parent.parent.artifactId}</contextPath>
                        <!--
                        The `JETTY_ENV_XML` environment variable points to the `jetty-env.xml` file that contains
                        all JNDI information.
                        -->
                        <!-- TODO Hibernate: Uncomment to enable Jetty Env XML containing JNDIs -->
                        <!--<jettyEnvXml>${env.JETTY_ENV_XML}</jettyEnvXml>-->
                        <!--
                        Forces Jetty to scan just jars that match the provided pattern to significantly speed up the
                        server startup.
                        -->
                        <webInfIncludeJarPattern>.*/.*jsp-api-[^/]\.jar$|./.*jsp-[^/]\.jar$|./.*taglibs[^/]*\.jar$
                        </webInfIncludeJarPattern>
                    </webApp>
                    <connectors>
                        <!--
                        `SocketConnector` is used instead of the preferred NIO's `SelectChannelConnector` because
                        Windows appears to have static file locking problems.
                        -->
                        <connector implementation="org.eclipse.jetty.server.bio.SocketConnector">
                            <port>7777</port>
                        </connector>
                    </connectors>
                </configuration>
                <!--
                These dependencies are required in order to run Jetty. Most of the dependencies are database
                drivers that may be defined in the `jetty-env.xml`.
                -->
                <dependencies>
                    <dependency>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                        <version>${log4j.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-api</artifactId>
                        <version>${slf4j.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                        <version>${slf4j.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>net.sourceforge.jtds</groupId>
                        <artifactId>jtds</artifactId>
                        <version>${jtds.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>${mysql.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>${h2.version}</version>
                    </dependency>
                    <!-- TODO Jetty: Uncomment to enable Sybase and DB2 drivers if they are already in local repo -->
                    <!--
                    Sybase and DB2 drivers are disabled by default because they don't exist in any public
                    repositories. If your project requires these dependencies, manually install them in your local
                    repo or your local Nexus before uncommenting the below.
                    -->
                    <!--<dependency>-->
                    <!--<groupId>com.sybase.jdbc4.jdbc</groupId>-->
                    <!--<artifactId>jconn4</artifactId>-->
                    <!--<version>${jconn4.version}</version>-->
                    <!--</dependency>-->
                    <!--<dependency>-->
                    <!--<groupId>com.ibm.db2.jcc</groupId>-->
                    <!--<artifactId>db2jcc4</artifactId>-->
                    <!--<version>${db2jcc4.version}</version>-->
                    <!--<classifier>${db2jcc4.classifier}</classifier>-->
                    <!--</dependency>-->
                    <!--<dependency>-->
                    <!--<groupId>com.ibm.db2.jcc</groupId>-->
                    <!--<artifactId>db2jcc_license_cisuz</artifactId>-->
                    <!--<version>${db2jcc4.version}</version>-->
                    <!--<classifier>${db2jcc4.classifier}</classifier>-->
                    <!--</dependency>-->
                </dependencies>
            </plugin>

            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <configuration>
                    <workingDirectory>src/main/frontend</workingDirectory>
                    <installDirectory>src/main/frontend</installDirectory>
                </configuration>
                <executions>
                    <!--
                    Install local node and npm within the project so that we can ensure all team members
                    use the same version.
                    -->
                    <execution>
                        <id>install-node-and-npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                            <nodeVersion>v0.10.40</nodeVersion>
                            <npmVersion>2.13.3</npmVersion>
                        </configuration>
                    </execution>
                    <!-- Perform `npm-install` to install any dependencies listed in `package.json`. -->
                    <execution>
                        <id>npm-install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                    </execution>
                    <!-- Execute Gulp with `production` task -->
                    <execution>
                        <id>gulp-production</id>
                        <goals>
                            <goal>gulp</goal>
                        </goals>
                        <configuration>
                            <arguments>production</arguments>
                        </configuration>
                    </execution>
                    <!-- Run Karma tests -->
                    <execution>
                        <id>karma</id>
                        <goals>
                            <goal>karma</goal>
                        </goals>
                        <configuration>
                            <karmaConfPath>${project.basedir}/src/test/resources/karma.conf.ci.js</karmaConfPath>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Executes default Gulp task to watch for JS and CSS changes and refresh them using BrowserSync. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <configuration>
                    <executable>./node_modules/gulp/bin/gulp.js</executable>
                    <workingDirectory>${project.basedir}/src/main/frontend</workingDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>


